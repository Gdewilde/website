<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://stargate.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://stargate.io/" rel="alternate" type="text/html" /><updated>2020-09-22T13:24:36+00:00</updated><id>https://stargate.io/feed.xml</id><title type="html">Stargate</title><subtitle>An open source API framework for data.</subtitle><author><name></name></author><entry><title type="html">Init Stargate</title><link href="https://stargate.io/2020/09/14/init-stargate.html" rel="alternate" type="text/html" title="Init Stargate" /><published>2020-09-14T06:00:00+00:00</published><updated>2020-09-14T06:00:00+00:00</updated><id>https://stargate.io/2020/09/14/init-stargate</id><content type="html" xml:base="https://stargate.io/2020/09/14/init-stargate.html">&lt;p&gt;We‚Äôre excited to release the first preview of Stargate, an open source API framework for data. This project came about because we got tired of using different databases and different APIs depending on the work that we were trying to get done. With ‚Äúread the manual‚Äù fatigue and lengthy selection processes wearing on us every time we created a new project, we thought - why not create a framework that can serve many APIs for a range of workloads? From this, Stargate was born.&lt;/p&gt;

&lt;p&gt;For example, if you‚Äôre a JavaScript developer building a website, saving and searching JSON is great and maybe you also have some GraphQL sprinkled throughout. If you‚Äôre a Java or C# developer working on an enterprise application, SQL is likely more your style. The goal of Stargate is to make your data available for you through whatever API you can dream up regardless of the backing datastore.&lt;/p&gt;

&lt;p&gt;So far we‚Äôve started with Apache Cassandra as the first backend and implemented the Cassandra Query Language (CQL) and a REST API for CRUD access to data in tables and have many more APIs coming soon.&lt;/p&gt;

&lt;p&gt;For any project to thrive it needs to be easy to work with and contribute to. We kept that in mind while architecting Stargate and the core codebase is modularized to facilitate extensibility and collaboration. We hope that you‚Äôll join us on this journey to redefine what‚Äôs possible when it comes to interacting with data at scale and if you‚Äôre interested in getting involved you can check out the code on &lt;a href=&quot;https://github.com/stargate/stargate&quot;&gt;GitHub&lt;/a&gt;, join our &lt;a href=&quot;https://groups.google.com/a/lists.stargate.io/g/stargate-users&quot;&gt;mailing list&lt;/a&gt;, or follow us on Twitter &lt;a href=&quot;https://twitter.com/stargateio&quot;&gt;@stargateio&lt;/a&gt;! üöÄ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/init-stargate/stargate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-does-stargate-work&quot;&gt;How does Stargate work?&lt;/h2&gt;

&lt;p&gt;Stargate is a data gateway component that is deployed between your client applications and database. We chose Cassandra as the first database because it solves the world‚Äôs hardest scale and availability challenges and we think there‚Äôs low hanging fruit in terms of APIs for the database.&lt;/p&gt;

&lt;p&gt;Stargate itself is based on the concept of a Cassandra &lt;a href=&quot;https://cassandra.apache.org/doc/latest/architecture/dynamo.html&quot;&gt;coordinator node&lt;/a&gt; and is very similar to the ‚Äúfat client‚Äù that Eric Lubow explains in his &lt;a href=&quot;https://www.slideshare.net/DataStax/optimizing-your-cluster-with-coordinator-nodes-eric-lubow-simplereach-cassandra-summit-2016&quot;&gt;presentation&lt;/a&gt; at Cassandra Summit in 2016. This means when Stargate is deployed, it joins the Cassandra cluster as a coordinator node but does not store any data. We chose this design because coordinator nodes in Cassandra already handle most of the request handling and routing that‚Äôs needed for a highly available storage proxy and it made sense to reuse that time-tested logic. This architecture allows for compute to be scaled independently of storage; a common model when using cloud infrastructure.&lt;/p&gt;

&lt;p&gt;The high-level architecture diagram below explains where Stargate fits in the stack and the vision for new APIs and integrations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/init-stargate/kubernetes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Taking a closer look, when a request is sent to Stargate, it is handled by the API Service, translated to the database query, and dispatched to the Persistence Service. The Persistence service then sends the request to the storage replicas of that row using Cassandra‚Äôs internal QueryHandler. The Persistence Service processes the request and responds to the client once it receives acknowledgements from the number of storage replicas specified by the request consistency level.&lt;/p&gt;

&lt;p&gt;This is a pretty classic implementation of ‚Äú&lt;a href=&quot;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&quot;&gt;Dynamo-based&lt;/a&gt;‚Äù coordination. Stargate‚Äôs ultimate goal is to have pluggable APIs on the front-end and pluggable storage engines on the &lt;em&gt;back-end&lt;/em&gt; with all the Dynamo magic happening in the middle.&lt;/p&gt;

&lt;p&gt;To understand how this distributed coordination works a bit more, in a single 6-node datacenter cluster with 3 storage replicas, an incoming request will go to all 3 replicas that own the requested row. In this case, the nodes labeled 1, 3, and 4 are storages nodes that own the data for the request. In the example below, the consistency level is LOCAL_QUORUM which means that Stargate will read or write data to 2 of the 3 storage replicas in order to satisfy the client request and ack the success.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/init-stargate/steps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;get-started&quot;&gt;Get Started&lt;/h2&gt;
&lt;p&gt;Below is an example of the REST API for CRUD operations that serves the data stored in Cassandra tables over HTTP. You can try this example by downloading &lt;a href=&quot;https://www.postman.com/downloads/&quot;&gt;Postman&lt;/a&gt; and importing the Stargate REST API collection in the &lt;a href=&quot;https://github.com/stargate/docs/blob/master/modules/developers-guide/examples/stargate-rest-api.postman_collection.json&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Pull down the docker image&lt;/strong&gt; (&lt;a href=&quot;https://hub.docker.com/u/stargateio&quot;&gt;https://hub.docker.com/u/stargateio&lt;/a&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull stargateio/stargate-3_11:v0.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Start the docker container&lt;/strong&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEVELOPER_MODE=true&lt;/code&gt; env variable. This removes the need to install a separate Cassandra instance.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; stargate &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8081:8081 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8082:8082 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 127.0.0.1:9042:9042 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;stargate &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CLUSTER_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.11 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DEVELOPER_MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;stargateio/stargate-3_11:v0.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Generate an auth token&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;s1&quot;&gt;'http://localhost:8081/v1/auth'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data-raw&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;username&quot;: &quot;cassandra&quot;,
    &quot;password&quot;: &quot;cassandra&quot;
  }'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Expected Output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;authToken&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{auth-token-here}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Create a keyspace&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  curl &lt;span class=&quot;nt&quot;&gt;--location&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--request&lt;/span&gt; POST &lt;span class=&quot;s1&quot;&gt;'localhost:8082/schemas/keyspaces'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'X-Cassandra-Token: {auth-token-here}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-raw&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
      &quot;name&quot;: &quot;users_keyspace&quot;,
      &quot;replicas&quot;: 1
    }'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Expected Output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;users_keyspace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Create a table&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  curl &lt;span class=&quot;nt&quot;&gt;--location&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--request&lt;/span&gt; POST &lt;span class=&quot;s1&quot;&gt;'localhost:8082/schemas/keyspaces/users_keyspace/tables'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'X-Cassandra-Token: {auth-token-here}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-raw&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
      &quot;name&quot;: &quot;users&quot;,
      &quot;columnDefinitions&quot;: [
        {
          &quot;name&quot;: &quot;firstname&quot;,
          &quot;typeDefinition&quot;: &quot;text&quot;
        },
        {
          &quot;name&quot;: &quot;lastname&quot;,
          &quot;typeDefinition&quot;: &quot;text&quot;
        },
        {
          &quot;name&quot;: &quot;email&quot;,
          &quot;typeDefinition&quot;: &quot;text&quot;
        },
        {
          &quot;name&quot;: &quot;favorite color&quot;,
          &quot;typeDefinition&quot;: &quot;text&quot;
        }
      ],
      &quot;primaryKey&quot;: {
        &quot;partitionKey&quot;: [&quot;firstname&quot;],
        &quot;clusteringKey&quot;: [&quot;lastname&quot;]
      },
      &quot;tableOptions&quot;: {
        &quot;defaultTimeToLive&quot;: 0,
        &quot;clusteringExpression&quot;:[
          {
            &quot;column&quot;: &quot;lastname&quot;,
            &quot;order&quot;: &quot;ASC&quot;
          }
        ]
      }
    }'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Expected Output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Add rows&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  curl &lt;span class=&quot;nt&quot;&gt;--location&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--request&lt;/span&gt; POST &lt;span class=&quot;s1&quot;&gt;'localhost:8082/v2/keyspaces/users_keyspace/users'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'X-Cassandra-Token: {auth-token-here}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--data-raw&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;firstname&quot;: &quot;Mookie&quot;,
    &quot;lastname&quot;: &quot;Betts&quot;,
    &quot;email&quot;: &quot;mookie.betts@gmail.com&quot;,
    &quot;favorite color&quot;: &quot;blue&quot;
  }'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Expected Output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;firstname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mookie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lastname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Betts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Step 7: Get rows&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  curl &lt;span class=&quot;nt&quot;&gt;-G&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--location&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://localhost:8082/v2/keyspaces/users_keyspace/users'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'X-Cassandra-Token: {auth-token-here}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--data-urlencode&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'where={&quot;firstname&quot;: {&quot;$eq&quot;: &quot;Mookie&quot;}}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Expected Output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;firstname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mookie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;favorite color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mookie.betts@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lastname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Betts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila! You can find the full reference for the table-based REST API and more in the &lt;a href=&quot;https://stargate.io/docs&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-can-i-get-involved&quot;&gt;How can I get involved?&lt;/h2&gt;
&lt;p&gt;Check out the code and start building with us! We‚Äôve architected this project with exploration, flexibility, and API and storage agnosticism as our &lt;em&gt;first class&lt;/em&gt; citizens; the goal is that this makes it easy for the community to innovate and add new APIs and extensions.&lt;/p&gt;

&lt;p&gt;The diagram below shows how the Stargate modules fit together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/init-stargate/stargate-modules.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get started building a new API extension, have a look at the existing &lt;a href=&quot;https://github.com/stargate/stargate/tree/master/restapi&quot;&gt;REST API&lt;/a&gt; implementation in the Stargate repo first. To get started building a new storage extension, check out the &lt;a href=&quot;https://github.com/stargate/stargate/tree/master/persistence-cassandra-3.11&quot;&gt;persistence-cassandra-3.11&lt;/a&gt; implementation. Once you have an idea of what you want to build, shoot us a note on the &lt;a href=&quot;https://groups.google.com/a/lists.stargate.io/g/stargate-users&quot;&gt;mailing list&lt;/a&gt; to discuss. Note that the internal APIs are under active development and they are likely to change before the first version is released.&lt;/p&gt;

&lt;p&gt;To request new features or file bugs, create a new GitHub issue in the &lt;a href=&quot;https://github.com/stargate/stargate&quot;&gt;stargate/stargate&lt;/a&gt; repository and we‚Äôll take it from there.
Let‚Äôs Explore
We can‚Äôt wait to see where this project takes &lt;em&gt;us&lt;/em&gt; and we‚Äôll be rolling out a few new APIs in the coming weeks. You can get updates by following us on Twitter &lt;a href=&quot;https://twitter.com/stargateio&quot;&gt;@stargateio&lt;/a&gt; and throw us a star on Github if you like what you see!&lt;/p&gt;

&lt;p&gt;We‚Äôre ready for lift-off, see you in the stars! ‚ú®&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/init-stargate/astronaut.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">We‚Äôre excited to release the first preview of Stargate, an open source API framework for data. This project came about because we got tired of using different databases and different APIs depending on the work that we were trying to get done. With ‚Äúread the manual‚Äù fatigue and lengthy selection processes wearing on us every time we created a new project, we thought - why not create a framework that can serve many APIs for a range of workloads? From this, Stargate was born.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>